### Logging into Salesforce ###




import pandas as pd
from simple_salesforce import Salesforce
import requests
import os
import Salesforce_Credentials as creds

# Authenticate to Salesforce Production
sf = Salesforce(
    username=creds.SF_USERNAME,
    password=creds.SF_PASSWORD,
    security_token=creds.SF_SECURITY_TOKEN,
    domain='login'  # Use 'test' for sandbox and 'login' for production
)

sand = Salesforce(
    username=creds.SAND_USERNAME,
    password=creds.SAND_PASSWORD,
    security_token=creds.SAND_SECURITY_TOKEN,
    domain='test'  # Use 'test' for sandbox and 'login' for production
)




### Copying in the Accounts ###


# Query existing accounts from Salesforce Production
accounts = sf.query_all("""
SELECT Id, Name, Type, BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry,
BillingLatitude, BillingLongitude, ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingLatitude, ShippingLongitude, 
Phone, Fax, AccountNumber, Website, Sic, Industry, ParentId,
RecordTypeId, BillingGeocodeAccuracy, ShippingGeocodeAccuracy, 
AnnualRevenue, NumberOfEmployees, Ownership, TickerSymbol, Description, Rating, Site,
Jigsaw, AccountSource, SicDesc, 
Account_Network_End_Date__c, Account_Network_Start_Date__c, 
Account_Number__c, Account_Participant_Status__c, Account_Specialty__c, CMO_Group__c, CT_CTA__c, 
Care_Mgmt__c, Category__c, Contact__c, County_NYS__c, EMR__c, Epic_Name__c, Excellus_Location_Name__c, 
Fax__c, IB_TCM_Pool_Name__c, Lab_Collection_Site__c, Practice_Resources__c, Legacy_Org_PL__c, 
Legal_TIN_Name__c, MRI_MRA__c, Mammography__c, Network_Status__c, Open_MRI_MRA__c, Other_Phone__c, 
PCMH_Expires__c, PCMH__c, PCN_Location__c, PET_CT__c, Practice_Management_System__c, 
Practice_NPI_Group__c, Practice_TIN__c, Radiology_Services__c, SafetyNet_Practice__c, 
Suppress_from_Online_Directory__c, System_Affiliation__c, URMC_eRecord_Dept_ID__c, URMC_eRecord_Dept_Name__c, 
Ultrasound__c, X_Ray__c, eRecord_ID__c, eRecord_PCP_Dep__c, 
Account_Legacy_Org_Id__c, 
Name_Address_Key__c, Practice_Location_Legacy_Org_Id__c, 
Primary_Care_Location__c, Physical_Therapy_Services__c, AHP_Embedded_CM__c
FROM Account
""")
account_data = [record for record in accounts['records']]

# Filter out accounts with the specific RecordTypeId
filtered_accounts = [acc for acc in account_data if acc['RecordTypeId'] != '012Dn000000FGWtIAO']

# Prepare data for insertion, separating parent (no ParentId) and child accounts
parent_accounts = []
child_accounts = []
for account in filtered_accounts:
    # Update Account Specialty if it's 'Ob Gyn' or 'Pediatric Developmental'
    if account.get('Account_Specialty__c') == 'Ob Gyn':
        account['Account_Specialty__c'] = 'Obstetrics/Gynecology'
    if account.get('Account_Specialty__c') == 'Pediatric Developmental':
        account['Account_Specialty__c'] = 'Pediatrics Developmental'
    
    # Separate parent and child accounts
    if account['ParentId'] is None:
        parent_accounts.append(account)
    else:
        child_accounts.append(account)

# Store original parent and child IDs
original_parent_ids = [acc['Id'] for acc in parent_accounts]
original_child_ids = [acc['Id'] for acc in child_accounts]
id_mapping = {}  # This will map original IDs to new IDs
failed_insertions = []  # List to store failed insertions

# Remove 'Id' from parent and child accounts before insertion
for account in parent_accounts + child_accounts:
    account.pop('Id', None)  # Remove the original Salesforce ID

# Insert parent accounts into the sandbox and map old AccountId to new AccountId
try:
    insert_results = sand.bulk.Account.insert(parent_accounts)
    for original_id, result in zip(original_parent_ids, insert_results):
        if result['success']:
            id_mapping[original_id] = result['id']
        else:
            failed_row = next(acc for acc in parent_accounts if acc.get('Id') == original_id)
            failed_row['Error'] = result['errors']
            failed_insertions.append(failed_row)
            print(f"Failed to insert parent account with ID {original_id} due to: {result['errors']}")
except Exception as e:
    print("An error occurred during the insertion of parent accounts:", str(e))

# Update child accounts with new ParentId from mapping
valid_child_accounts = []
for account in child_accounts:
    if account['ParentId'] in id_mapping:
        account['ParentId'] = id_mapping[account['ParentId']]
        valid_child_accounts.append(account)
    else:
        print(f"No new ParentId mapped for old ParentId {account['ParentId']} - account may not be linked properly.")

# Insert child accounts into the sandbox and map old AccountId to new AccountId
try:
    insert_child_results = sand.bulk.Account.insert(valid_child_accounts)
    for original_id, result in zip(original_child_ids, insert_child_results):
        if result['success']:
            id_mapping[original_id] = result['id']
        else:
            failed_row = next(acc for acc in child_accounts if acc.get('Id') == original_id)
            failed_row['Error'] = result['errors']
            failed_insertions.append(failed_row)
            print(f"Failed to insert child account with ID {original_id} due to: {result['errors']}")
except Exception as e:
    print("An error occurred during the insertion of child accounts:", str(e))

# Now, update the newly created records with all other fields from the production environment
# Prepare data for update using the id_mapping to find the correct records in the sandbox
update_accounts = []
for original_id, new_id in id_mapping.items():
    matching_record = next((acc for acc in account_data if acc.get('Id') == original_id), None)
    if matching_record:
        matching_record['NewId'] = new_id  # Store the new sandbox ID temporarily in a new field
        update_accounts.append(matching_record)

# Perform the bulk update operation
try:
    update_results = sand.bulk.Account.update(update_accounts)
    for record, result in zip(update_accounts, update_results):
        if not result['success']:
            record['Error'] = result['errors']
            failed_insertions.append(record)
            print(f"Failed to update account with Id {record.get('NewId', '')} due to: {result['errors']}")
except Exception as e:
    print("An error occurred during the update of accounts:", str(e))

# Create a DataFrame of all failed insertions and updates
failed_updates_df = pd.DataFrame(failed_insertions)

# Display or save the DataFrame of failed accounts
print(f"Total accounts failed to insert or update: {len(failed_insertions)}")
print(failed_updates_df)

# Save to CSV for further review
failed_updates_df.to_csv('C://Users//jkim436//Downloads//failed_accounts.csv', index=False)




### Check if all the Account Object items moved over correctly ###




from datetime import datetime

# Get today's date in the format required by Salesforce (YYYY-MM-DD)
#today = datetime.today().strftime('%Y-%m-%d')

# SOQL query to get Account IDs created today
query = """
SELECT Id FROM Account 
WHERE CreatedDate >= 2024-09-17T00:00:00Z AND CreatedDate < 2024-09-18T00:00:00Z
"""
accounts_created_today = sand.query_all(query)['records']
account_ids = [account['Id'] for account in accounts_created_today]

print(f"Found {len(account_ids)} accounts created that day.")









#### Map the New AccountId to the Old AccountId values ####



from simple_salesforce import Salesforce
import pandas as pd

# Assuming Salesforce connections to Production (sf) and Sandbox (sand) are already established

# Query production accounts to get necessary fields
prod_accounts = sf.query_all("""
SELECT Id, Name, Practice_TIN__c, 
ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry 
FROM Account
""")

# Create a key based on Name, Practice_TIN__c, and full ShippingAddress in Production
prod_account_map = {
    (
        acc['Name'],
        acc['Practice_TIN__c'],
        f"{acc.get('ShippingStreet', '')}, {acc.get('ShippingCity', '')}, {acc.get('ShippingState', '')}, {acc.get('ShippingPostalCode', '')}, {acc.get('ShippingCountry', '')}"
    ): acc['Id']
    for acc in prod_accounts['records']
}

# Query sandbox accounts to get the same fields
sandbox_accounts = sand.query_all("""
SELECT Id, Name, Practice_TIN__c, 
ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry 
FROM Account
""")

# Prepare sandbox updates based on matching key
sandbox_updates = []
sandbox_to_prod_map = {}  # For keeping track of the mappings

for sandbox_account in sandbox_accounts['records']:
    # Create the matching key for Sandbox accounts
    sandbox_key = (
        sandbox_account['Name'],
        sandbox_account['Practice_TIN__c'],
        f"{sandbox_account.get('ShippingStreet', '')}, {sandbox_account.get('ShippingCity', '')}, {sandbox_account.get('ShippingState', '')}, {sandbox_account.get('ShippingPostalCode', '')}, {sandbox_account.get('ShippingCountry', '')}"
    )

    # Check if the key exists in production map
    if sandbox_key in prod_account_map:
        production_id = prod_account_map[sandbox_key]
        # Assuming AccountId__c is used to map production AccountId in Sandbox
        sandbox_updates.append({
            'Id': sandbox_account['Id'],
            'AccountId__c': production_id  # Update to the correct Production AccountId
        })
        sandbox_to_prod_map[sandbox_account['Id']] = production_id
    else:
        print(f"No matching production account found for Sandbox Account ID {sandbox_account['Id']} with key: {sandbox_key}")

# Create a list of dictionaries to store mapping results
mapping_results = []

for sandbox_id, production_id in sandbox_to_prod_map.items():
    matching_sandbox_account = next((acc for acc in sandbox_accounts['records'] if acc['Id'] == sandbox_id), None)
    if matching_sandbox_account:
        shipping_address = f"{matching_sandbox_account.get('ShippingStreet', '')}, {matching_sandbox_account.get('ShippingCity', '')}, {matching_sandbox_account.get('ShippingState', '')}, {matching_sandbox_account.get('ShippingPostalCode', '')}, {matching_sandbox_account.get('ShippingCountry', '')}"
        mapping_results.append({
            'SandboxAccountId': sandbox_id,
            'ProductionAccountId': production_id,
            'Name': matching_sandbox_account['Name'],
            'Practice_TIN__c': matching_sandbox_account['Practice_TIN__c'],
            'ShippingAddress': shipping_address
        })

# Convert the list of dictionaries into a DataFrame named account_id_mapping
account_id_mapping = pd.DataFrame(mapping_results)

# Display or use the DataFrame
print(account_id_mapping)











#### Copying in the Contacts ####



import math
import pandas as pd

# Function to split the contact data into smaller batches
def batch_data(data, batch_size):
    """Yield successive batch_size-sized chunks from data."""
    for i in range(0, len(data), batch_size):
        yield data[i:i + batch_size]

# Assuming `account_id_mapping` is a DataFrame with 'ProductionAccountId' and 'SandboxAccountId'
# Convert it into a dictionary for easier lookup
account_id_mapping_dict = dict(zip(account_id_mapping['ProductionAccountId'], account_id_mapping['SandboxAccountId']))

# Query contacts from Salesforce production
contacts = sf.query_all("""
SELECT Id,
AccountId,
LastName,
FirstName,
Salutation,
MiddleName,
Suffix,
RecordTypeId,
OtherStreet,
OtherCity,
OtherState,
OtherPostalCode,
OtherCountry,
OtherLatitude,
OtherLongitude,
OtherGeocodeAccuracy,
MailingStreet,
MailingCity,
MailingState,
MailingPostalCode,
MailingCountry,
MailingLatitude,
MailingLongitude,
MailingGeocodeAccuracy,
Phone,
Fax,
MobilePhone,
HomePhone,
OtherPhone,
AssistantPhone,
ReportsToId,
Email,
Title,
Department,
AssistantName,
LeadSource,
Birthdate,
Description,
OwnerId,
HasOptedOutOfEmail,
HasOptedOutOfFax,
DoNotCall,
EmailBouncedReason,
EmailBouncedDate,
Jigsaw,
IndividualId,
Pronouns,
GenderIdentity,
AHP_Medical_Staff_Membership_2__c,
AHP_Medical_Staff_Membership__c,
Accepting_New_Patients__c,
Active_Contract_Count__c,
Contract_Participant__c,
Credentials__c,
Deceased_Date__c,
Direct_Fax__c,
Email_2__c,
Gender__c,
Home_City__c,
Home_State__c,
Home_Zip_Code__c,
Key_Words__c,
Last_Primary_Care_Location__c,
Legacy_Org_Id__c,
Malpractice_Carrier__c,
NPI__c,
Network_Participation_Status__c,
Admin_Asst__c,
Other_Medical_Staff_Membership__c,
Personal_Mobile__c,
Participant_Network_End_Date__c,
Participant_Network_Start_Date__c,
Practice_Location_End_Date__c,
Practice_Location_Start_Date__c,
Preferred_Email_Address__c,
Primary_Care_Provider__c,
Primary_Prac_Loc_for_this_Provider__c,
Provider_Role__c,
Role__c,
Second_Taxonomy__c,
Specialty_2__c,
Specialty__c,
Suppress_from_Contact_Directory_All_Loc__c,
Suppress_from_Online_Directory__c,
Taxonomy__c,
Term_Reason__c,
Title__c,
URID__c,
URMC_Username__c,
UR_NetID__c,
Web_Commentary__c,
Web_Publish__c,
Work_Email__c,
Work_Fax__c,
Work_Mobile__c,
Work_Phone__c,
Employment_End_Date__c,
Employment_Start_Date__c,
Emergency_Contact_1__c,
Emergency_Contact_1_Phone__c,
Emergency_Contact_2__c,
Emergency_Contact_2_Phone__c,
AHP_Percentage__c,
HomeStreet__c
FROM Contact
""")
contact_data = [record for record in contacts['records']]

# Track original ContactId to new ContactId mappings
contact_id_mapping = {}
failed_contacts = []  # List to store failed contacts

# Update AccountId to the new SandboxAccountId using account_id_mapping_dict
for contact in contact_data:
    original_contact_id = contact['Id']  # Capture the original ContactId before removing 'Id'
    
    # Update AccountId if the ProductionAccountId matches in the mapping
    if contact['AccountId'] in account_id_mapping_dict:
        contact['AccountId'] = account_id_mapping_dict[contact['AccountId']]
    
    # Remove unnecessary fields
    contact.pop('attributes', None)
    contact.pop('Id', None)  # Remove the original Salesforce ID
    
    # Initialize the mapping with the original ContactId
    contact_id_mapping[original_contact_id] = None

# Estimate the batch size to be within the 10 MB limit
batch_size = 1000  # Start with 1000 records per batch, adjust as necessary

# Insert contacts into the sandbox in batches
inserted_contact_ids = []
try:
    for batch in batch_data(contact_data, batch_size):
        insert_results = sand.bulk.Contact.insert(batch)
        for original_contact, result in zip(batch, insert_results):
            original_contact_id = next((k for k, v in contact_id_mapping.items() if v is None), None)  # Retrieve the original ContactId
            if result['success']:
                new_id = result['id']
                inserted_contact_ids.append(new_id)
                # Map the original ContactId to the new ContactId
                contact_id_mapping[original_contact_id] = new_id
            else:
                # Add failed contact information including error details
                failed_contact = original_contact.copy()  # Copy to avoid modifying the original batch
                failed_contact['Error'] = result['errors']
                failed_contacts.append(failed_contact)
                print(f"Failed to insert contact due to: {result['errors']}")
        print(f"Successfully inserted {len(inserted_contact_ids)} contacts so far.")
except Exception as e:
    print("An error occurred during the insertion of contacts:", str(e))

print(f"Total contacts inserted: {len(inserted_contact_ids)}")

# Create a DataFrame of failed contacts
failed_contacts_df = pd.DataFrame(failed_contacts)

# Display or save the DataFrame of failed contacts
print(f"Total contacts failed to insert: {len(failed_contacts)}")
print(failed_contacts_df)










#### Map the New ContactId to the Old ContactId values ####




def construct_full_name(contact):
    full_name = f"{contact.get('FirstName', '')} {contact.get('MiddleName', '')} {contact.get('LastName', '')} {contact.get('Suffix', '')}".strip()
    return " ".join(full_name.split())  # Remove any extra spaces

# Step 2: Pull Contact data from Production
prod_contacts = sf.query_all("""
SELECT Id, FirstName, MiddleName, LastName, Suffix
FROM Contact
""")

# Create a DataFrame for production contacts and construct the full "Name"
prod_contact_df = pd.DataFrame(prod_contacts['records'])
prod_contact_df['FullName'] = prod_contact_df.apply(construct_full_name, axis=1)

# Step 3: Pull Contact data from Sandbox
sandbox_contacts = sand.query_all("""
SELECT Id, FirstName, MiddleName, LastName, Suffix
FROM Contact
""")

# Create a DataFrame for sandbox contacts and construct the full "Name"
sandbox_contact_df = pd.DataFrame(sandbox_contacts['records'])
sandbox_contact_df['FullName'] = sandbox_contact_df.apply(construct_full_name, axis=1)

# Step 4: Perform the matching between Production and Sandbox based on "FullName"
# We'll do a left join on the FullName field to match corresponding contacts
matched_contacts_df = pd.merge(prod_contact_df, sandbox_contact_df, on='FullName', suffixes=('_Prod', '_Sandbox'))

# Step 5: Display or save the matched DataFrame
print(matched_contacts_df[['Id_Prod', 'Id_Sandbox', 'FullName']])














#### First, check how many Account Contact Relationships are supposed to move over from the production environment ####





# Query to count the number of AccountContactRelation (ACR) records
acr_count = sf.query("SELECT COUNT() FROM AccountContactRelation")

# Output the count
print(f"Total number of ACRs in the production environment: {acr_count['totalSize']}")











### Copying in the ACRs ###



# Step 1: Query AccountContactRelation object from Salesforce Production
prod_acr_records = sf.query_all("""
SELECT Id, AccountId, ContactId, Roles, IsActive, StartDate, EndDate, 
Accepting_New_Patients__c, Account_Contact_Type__c, Direct_Fax__c, CM_Directory_Contact__c, 
Payment_Contact__c, Legacy_Staff_Id__c, Office_Staff_Role__c, ACRProvider_Role__c, 
Suppress_from_Contact_Directory_All_Loc__c, Suppress_from_Contact_Directory__c, 
Suppress_from_Online_Directory_All_Loc__c, Work_Email__c, Work_Fax__c, Work_Mobile__c, 
Work_Phone__c, Legacy_PLP_Id__c, PLP_is_Active__c, Last_Primary_Care_Location__c, 
Site_Medical_Director__c, Roster_Update_Contact__c
FROM AccountContactRelation
""")
prod_acr_data = [record for record in prod_acr_records['records']]

# Step 2: Use the matched contacts DataFrame to create a mapping of Production ContactId to Sandbox ContactId
# matched_contacts_df contains 'Id_Prod' and 'Id_Sandbox' columns

contact_id_remap = dict(zip(matched_contacts_df['Id_Prod'], matched_contacts_df['Id_Sandbox']))

# Step 3: Remap the AccountId and ContactId to their Sandbox equivalents
sandbox_acr_data = []
failed_remaps = []

for acr in prod_acr_data:
    new_acr = acr.copy()  # Make a copy of the production record
    
    # Remap AccountId using the existing account_id_mapping_dict
    prod_account_id = acr.get('AccountId')
    if prod_account_id in account_id_mapping_dict:
        new_acr['AccountId'] = account_id_mapping_dict[prod_account_id]
    else:
        print(f"Failed to remap AccountId {prod_account_id}")
        failed_remaps.append(new_acr)
        continue
    
    # Remap ContactId using the contact_id_remap based on FullName matching
    prod_contact_id = acr.get('ContactId')
    if prod_contact_id in contact_id_remap:
        new_acr['ContactId'] = contact_id_remap[prod_contact_id]
    else:
        print(f"Failed to remap ContactId {prod_contact_id}")
        failed_remaps.append(new_acr)
        continue
    
    # Remove the 'Id' field as it cannot be used in Sandbox insertions
    new_acr.pop('Id', None)
    
    # Add the remapped record to the new list
    sandbox_acr_data.append(new_acr)

# Step 4: Insert the remapped AccountContactRelation records into the Sandbox
try:
    insert_results = sand.bulk.AccountContactRelation.insert(sandbox_acr_data)
    failed_inserts = []
    for record, result in zip(sandbox_acr_data, insert_results):
        if not result['success']:
            record['Error'] = result['errors']
            failed_inserts.append(record)
            print(f"Failed to insert AccountContactRelation: {result['errors']}")
except Exception as e:
    print(f"An error occurred during the insertion of AccountContactRelation records: {str(e)}")

# Step 5: Handle failed inserts (if needed)
if failed_inserts:
    failed_inserts_df = pd.DataFrame(failed_inserts)
    failed_inserts_df.to_csv('C://Users//jkim436//Downloads//failed_acr_insertions.csv', index=False)

print(f"Total AccountContactRelation records inserted: {len(sandbox_acr_data) - len(failed_inserts)}")
print(f"Total AccountContactRelation records failed to insert: {len(failed_inserts)}")

# Save failed remaps for further analysis if necessary
if failed_remaps:
    failed_remaps_df = pd.DataFrame(failed_remaps)
    failed_remaps_df.to_csv('C://Users//jkim436//Downloads//failed_acr_remaps.csv', index=False)

print(f"Total records failed to remap: {len(failed_remaps)}")














#### Checking how many Account Contact Relationships were successfully copied over into the Sandbox environment ####




from datetime import datetime

# Get today's date in the format required by Salesforce (YYYY-MM-DD)
#today = datetime.today().strftime('%Y-%m-%d')

# SOQL query to get Account IDs created today
query = """
SELECT Id FROM AccountContactRelation
WHERE CreatedDate >= 2024-10-09T00:00:00Z AND CreatedDate < 2024-10-10T00:00:00Z
"""
acrs_created_today = sand.query_all(query)['records']
acr_ids = [acr['Id'] for acr in acrs_created_today]

print(f"Found {len(acr_ids)} acrs created that day.")



















### Updating ACRs that have Missing Values ###






import pandas as pd
from simple_salesforce import Salesforce

# Step 1: Query AccountContactRelation object from Salesforce Production
prod_acr_records = sf.query_all("""
SELECT Id, AccountId, ContactId, Roles, IsActive, StartDate, EndDate, 
Accepting_New_Patients__c, Account_Contact_Type__c, Direct_Fax__c, CM_Directory_Contact__c, 
Payment_Contact__c, Legacy_Staff_Id__c, Office_Staff_Role__c, ACRProvider_Role__c, 
Suppress_from_Contact_Directory_All_Loc__c, Suppress_from_Contact_Directory__c, 
Suppress_from_Online_Directory_All_Loc__c, Work_Email__c, Work_Fax__c, Work_Mobile__c, 
Work_Phone__c, Legacy_PLP_Id__c, PLP_is_Active__c, Last_Primary_Care_Location__c, 
Site_Medical_Director__c, Roster_Update_Contact__c
FROM AccountContactRelation
""")
prod_acr_df = pd.DataFrame(prod_acr_records['records'])

# Step 2: Query AccountContactRelation object from Salesforce Sandbox
sandbox_acr_records = sand.query_all("""
SELECT Id, AccountId, ContactId, Roles, IsActive, StartDate, EndDate, 
Accepting_New_Patients__c, Account_Contact_Type__c, Direct_Fax__c, CM_Directory_Contact__c, 
Payment_Contact__c, Legacy_Staff_Id__c, Office_Staff_Role__c, ACRProvider_Role__c, 
Suppress_from_Contact_Directory_All_Loc__c, Suppress_from_Contact_Directory__c, 
Suppress_from_Online_Directory_All_Loc__c, Work_Email__c, Work_Fax__c, Work_Mobile__c, 
Work_Phone__c, Legacy_PLP_Id__c, PLP_is_Active__c, Last_Primary_Care_Location__c, 
Site_Medical_Director__c, Roster_Update_Contact__c
FROM AccountContactRelation
""")
sandbox_acr_df = pd.DataFrame(sandbox_acr_records['records'])

# Step 3: Remap the AccountId and ContactId for production records to match the Sandbox environment
# Assuming the `account_id_mapping_dict` and `contact_id_remap` (from matched_contacts_df) exist
prod_acr_df['Remapped_AccountId'] = prod_acr_df['AccountId'].map(account_id_mapping_dict)
prod_acr_df['Remapped_ContactId'] = prod_acr_df['ContactId'].map(contact_id_remap)

# Drop records where remapping failed
prod_acr_df = prod_acr_df.dropna(subset=['Remapped_AccountId', 'Remapped_ContactId'])

# Step 4: Merge production data with sandbox data based on remapped AccountId and ContactId
merged_acr_df = pd.merge(sandbox_acr_df, prod_acr_df, 
                         left_on=['AccountId', 'ContactId'], 
                         right_on=['Remapped_AccountId', 'Remapped_ContactId'], 
                         suffixes=('_Sandbox', '_Prod'))

# Step 5: Identify records in Sandbox that have missing values and need to be updated
fields_to_check = [
    'Roles', 'IsActive', 'StartDate', 'EndDate', 
    'Accepting_New_Patients__c', 'Account_Contact_Type__c', 'Direct_Fax__c', 'CM_Directory_Contact__c', 
    'Payment_Contact__c', 'Legacy_Staff_Id__c', 'Office_Staff_Role__c', 'ACRProvider_Role__c', 
    'Suppress_from_Contact_Directory_All_Loc__c', 'Suppress_from_Contact_Directory__c', 
    'Suppress_from_Online_Directory_All_Loc__c', 'Work_Email__c', 'Work_Fax__c', 'Work_Mobile__c', 
    'Work_Phone__c', 'Legacy_PLP_Id__c', 'PLP_is_Active__c', 'Last_Primary_Care_Location__c', 
    'Site_Medical_Director__c', 'Roster_Update_Contact__c'
]

# Prepare list of records to update in Sandbox
update_records = []
for _, row in merged_acr_df.iterrows():
    update_record = {'Id': row['Id_Sandbox']}  # Start with the Sandbox ACR Id
    needs_update = False
    
    # Check each field and update if the Sandbox value is missing (NaN) but exists in Production
    for field in fields_to_check:
        sandbox_value = row[f'{field}_Sandbox']
        prod_value = row[f'{field}_Prod']
        
        if pd.isna(sandbox_value) and not pd.isna(prod_value):
            update_record[field] = prod_value
            needs_update = True
    
    # Add to update list if any field requires an update
    if needs_update:
        update_records.append(update_record)

# Step 6: Perform the update in the Sandbox using the Salesforce bulk API
if update_records:
    try:
        update_results = sand.bulk.AccountContactRelation.update(update_records)
        failed_updates = [res for res in update_results if not res['success']]
        
        if failed_updates:
            print(f"Failed to update {len(failed_updates)} ACR records.")
            failed_updates_df = pd.DataFrame(failed_updates)
            failed_updates_df.to_csv('C://Users//jkim436//Downloads//failed_acr_updates.csv', index=False)
        
        print(f"Successfully updated {len(update_records) - len(failed_updates)} ACR records.")
    
    except Exception as e:
        print(f"An error occurred during the update of ACR records: {str(e)}")
else:
    print("No ACR records required updates.")
















#### Copying in the Contract__c object items ####



# Query the fields from the Contract__c object in Production
query = '''
    SELECT Id, OwnerId, Contract_End_Date__c, 
    Contract_Name__c, Contract_Start_Date__c, Contract_Type__c, 
    Legacy_Contract_Id__c 
    FROM Contract__c
'''

# Fetch all Contract__c records from production
prod_contracts = sf.query_all(query)

# Extract records into a list of dictionaries
prod_contracts_records = prod_contracts['records']

# Remove Salesforce metadata (the 'attributes' key)
for record in prod_contracts_records:
    record.pop('attributes', None)

# Insert the records into the Sandbox
for record in prod_contracts_records:
    # Remove the Id field as it's autogenerated in the Sandbox
    record.pop('Id', None)
    
    # Insert each record into the Sandbox
    sand.Contract__c.create(record)

print(f"{len(prod_contracts_records)} Contract__c records copied from Production to Sandbox.")












#### Matching up the Old AccountId and ContactId values with the Contract Participant associated New Ids ####

from simple_salesforce import Salesforce
import pandas as pd

# Assuming Salesforce connections to Production (sf) and Sandbox (sand) are already established

# Query production accounts to get necessary fields
prod_accounts = sf.query_all("""
SELECT Id, Name, Practice_TIN__c, 
ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry 
FROM Account
""")

# Create a key based on Name, Practice_TIN__c, and full ShippingAddress in Production
prod_account_map = {
    (
        acc['Name'],
        acc['Practice_TIN__c'],
        f"{acc.get('ShippingStreet', '')}, {acc.get('ShippingCity', '')}, {acc.get('ShippingState', '')}, {acc.get('ShippingPostalCode', '')}, {acc.get('ShippingCountry', '')}"
    ): acc['Id']
    for acc in prod_accounts['records']
}

# Query sandbox accounts to get the same fields
sandbox_accounts = sand.query_all("""
SELECT Id, Name, Practice_TIN__c, 
ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry 
FROM Account
""")

# Prepare sandbox updates based on matching key
sandbox_updates = []
sandbox_to_prod_map = {}  # For keeping track of the mappings

for sandbox_account in sandbox_accounts['records']:
    # Create the matching key for Sandbox accounts
    sandbox_key = (
        sandbox_account['Name'],
        sandbox_account['Practice_TIN__c'],
        f"{sandbox_account.get('ShippingStreet', '')}, {sandbox_account.get('ShippingCity', '')}, {sandbox_account.get('ShippingState', '')}, {sandbox_account.get('ShippingPostalCode', '')}, {sandbox_account.get('ShippingCountry', '')}"
    )

    # Check if the key exists in production map
    if sandbox_key in prod_account_map:
        production_id = prod_account_map[sandbox_key]
        # Assuming AccountId__c is used to map production AccountId in Sandbox
        sandbox_updates.append({
            'Id': sandbox_account['Id'],
            'AccountId__c': production_id  # Update to the correct Production AccountId
        })
        sandbox_to_prod_map[sandbox_account['Id']] = production_id
    else:
        print(f"No matching production account found for Sandbox Account ID {sandbox_account['Id']} with key: {sandbox_key}")

# Create a list of dictionaries to store mapping results
mapping_results = []

for sandbox_id, production_id in sandbox_to_prod_map.items():
    matching_sandbox_account = next((acc for acc in sandbox_accounts['records'] if acc['Id'] == sandbox_id), None)
    if matching_sandbox_account:
        shipping_address = f"{matching_sandbox_account.get('ShippingStreet', '')}, {matching_sandbox_account.get('ShippingCity', '')}, {matching_sandbox_account.get('ShippingState', '')}, {matching_sandbox_account.get('ShippingPostalCode', '')}, {matching_sandbox_account.get('ShippingCountry', '')}"
        mapping_results.append({
            'SandboxAccountId': sandbox_id,
            'ProductionAccountId': production_id,
            'Name': matching_sandbox_account['Name'],
            'Practice_TIN__c': matching_sandbox_account['Practice_TIN__c'],
            'ShippingAddress': shipping_address
        })

# Convert the list of dictionaries into a DataFrame named account_id_mapping
account_id_mapping = pd.DataFrame(mapping_results)

# Display or use the DataFrame
print(account_id_mapping)


def construct_full_name(contact):
    full_name = f"{contact.get('FirstName', '')} {contact.get('MiddleName', '')} {contact.get('LastName', '')} {contact.get('Suffix', '')}".strip()
    return " ".join(full_name.split())  # Remove any extra spaces

# Step 2: Pull Contact data from Production
prod_contacts = sf.query_all("""
SELECT Id, FirstName, MiddleName, LastName, Suffix
FROM Contact
""")

# Create a DataFrame for production contacts and construct the full "Name"
prod_contact_df = pd.DataFrame(prod_contacts['records'])
prod_contact_df['FullName'] = prod_contact_df.apply(construct_full_name, axis=1)

# Step 3: Pull Contact data from Sandbox
sandbox_contacts = sand.query_all("""
SELECT Id, FirstName, MiddleName, LastName, Suffix
FROM Contact
""")

# Create a DataFrame for sandbox contacts and construct the full "Name"
sandbox_contact_df = pd.DataFrame(sandbox_contacts['records'])
sandbox_contact_df['FullName'] = sandbox_contact_df.apply(construct_full_name, axis=1)

# Step 4: Perform the matching between Production and Sandbox based on "FullName"
# We'll do a left join on the FullName field to match corresponding contacts
matched_contacts_df = pd.merge(prod_contact_df, sandbox_contact_df, on='FullName', suffixes=('_Prod', '_Sandbox'))

# Step 5: Display or save the matched DataFrame
print(matched_contacts_df[['Id_Prod', 'Id_Sandbox', 'FullName']])














#### Copying in the Contract Participant object records ####




# Query Contract__c data from Production
prod_contracts = sf.query_all("""
    SELECT Id, Contract_Name__c, Contract_Start_Date__c, Contract_End_Date__c, Legacy_Contract_Id__c
    FROM Contract__c
""")

# Query Contract__c data from Sandbox
sandbox_contracts = sand.query_all("""
    SELECT Id, Contract_Name__c, Contract_Start_Date__c, Contract_End_Date__c, Legacy_Contract_Id__c
    FROM Contract__c
""")

# Create a DataFrame for production and sandbox contracts
prod_contracts_df = pd.DataFrame(prod_contracts['records'])
sandbox_contracts_df = pd.DataFrame(sandbox_contracts['records'])

# Match Contracts based on Contract_Name__c, Contract_Start_Date__c, and Contract_End_Date__c
contract_remap_df = pd.merge(
    prod_contracts_df, 
    sandbox_contracts_df, 
    on=['Contract_Name__c', 'Contract_Start_Date__c', 'Contract_End_Date__c'],  # Add Legacy_Contract_Id__c if necessary
    suffixes=('_Prod', '_Sandbox')
)[['Id_Prod', 'Id_Sandbox']].rename(columns={'Id_Prod': 'ProductionContractId', 'Id_Sandbox': 'SandboxContractId'})

# Create a lookup dictionary for ContractId mapping (Production to Sandbox)
contract_id_lookup = contract_remap_df.set_index('ProductionContractId')['SandboxContractId'].to_dict()

# Display the contract mapping for verification
print(contract_remap_df)



# Create a lookup dictionary for AccountId mapping (Sandbox to Production)
account_id_lookup = account_id_mapping.set_index('ProductionAccountId')['SandboxAccountId'].to_dict()

# Create a lookup dictionary for ContactId mapping (Sandbox to Production)
contact_id_lookup = matched_contacts_df.set_index('Id_Prod')['Id_Sandbox'].to_dict()

# Create a list to hold the Contract_Participant__c records that have missing cross-references
missing_references = []

query = '''
    SELECT Id, OwnerId, Contact__c, Contract_Participant_Legacy_Id__c, Contract__c, 
    Participant_End_Date_for_this_Contract__c, Participant_Start_Date_for_this_Contract__c, 
    Participant_Status__c, Practice__c, TermReason__c 
    FROM Contract_Participant__c
'''

# Fetch all Contract_Participant__c records from Production
prod_participants = sf.query_all(query)
prod_participant_records = prod_participants['records']

# Function to check if a Contract_Participant__c record already exists in the Sandbox
def check_existing_participant(sand, contact_id, contract_id):
    query = f"""
        SELECT Id FROM Contract_Participant__c 
        WHERE Contact__c = '{contact_id}' 
        AND Contract__c = '{contract_id}'
    """
    existing_participants = sand.query(query)
    return len(existing_participants['records']) > 0

# Update ContractId (Contract__c) field using the contract mapping
for record in prod_participant_records:
    # Remove the Id field since it's autogenerated in the Sandbox
    record.pop('Id', None)
    
    # Flag to determine if a record should be skipped due to missing references
    missing_reference = False
    
    # Remap AccountId (Practice__c) if present
    if record.get('Practice__c') in account_id_lookup:
        record['Practice__c'] = account_id_lookup[record['Practice__c']]
    else:
        print(f"Warning: No matching AccountId found for Practice__c: {record.get('Practice__c')}")
        missing_reference = True

    # Remap ContactId (Contact__c) if present
    if record.get('Contact__c') in contact_id_lookup:
        record['Contact__c'] = contact_id_lookup[record['Contact__c']]
    else:
        print(f"Warning: No matching ContactId found for Contact__c: {record.get('Contact__c')}")
        missing_reference = True
    
    # Remap ContractId (Contract__c) if present
    if record.get('Contract__c') in contract_id_lookup:
        record['Contract__c'] = contract_id_lookup[record['Contract__c']]
    else:
        print(f"Warning: No matching ContractId found for Contract__c: {record.get('Contract__c')}")
        missing_reference = True
    
    # If any references are missing, add the record to the missing_references list and skip this record
    if missing_reference:
        missing_references.append(record)
        continue  # Skip this record and move to the next one
    
    # Check if this Contract_Participant__c record already exists in the sandbox
    if check_existing_participant(sand, record['Contact__c'], record['Contract__c']):
        print(f"Duplicate found: Skipping insertion for Contact__c {record['Contact__c']} and Contract__c {record['Contract__c']}")
        continue  # Skip inserting if a duplicate is found

    # Insert the record into the Sandbox environment if no references are missing and no duplicates exist
    sand.Contract_Participant__c.create(record)

# Convert the missing_references list to a DataFrame for further analysis or logging
missing_references_df = pd.DataFrame(missing_references)

# Display or save the DataFrame with records that had missing references
print(f"{len(missing_references_df)} records had missing references and were not inserted.")
missing_references_df.to_csv('missing_references_contract_participants.csv', index=False)

print(f"{len(prod_participant_records) - len(missing_references_df)} Contract_Participant__c records copied from Production to Sandbox with updated AccountId, ContactId, and ContractId mappings.")

